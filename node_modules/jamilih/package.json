{
  "name": "jamilih",
  "version": "0.2.1",
  "author": {
    "name": "Brett Zamir",
    "email": "brettz9@yahoo.com",
    "url": "brett-zamir.me"
  },
  "description": "Provide round-trippable JSON/JavaScript serialization as with JsonML, but with all items at a given array level being the same type of item (unless marked with a deeper level of nesting) and with a slightly more template-friendly capacity to inline insert fragments or child nodes (e.g., as by function return).",
  "main": "./jml",
  "repository": {
    "type": "git",
    "url": "https://github.com/brettz9/jamilih.git"
  },
  "keywords": [
    "json",
    "javascript",
    "template",
    "templating",
    "html"
  ],
  "license": "MIT",
  "engine": {
    "node": ">=0.10"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brettz9/jamilih/issues"
  },
  "readme": "NOTE: This project is currently incomplete and the API is not yet stable.\r\n\r\nRationale\r\n========\r\nProvide round-trippable JSON/JavaScript serialization as with JsonML, but with all items at a given array level being the same type of item (unless marked with a deeper level of nesting) and with a slightly more template-friendly capacity to inline insert fragments or child nodes (e.g., as by function return).\r\n\r\nRules (summary)\r\n==============\r\n\r\n1. String element name (or array of 1-4)\r\n2. Optional object with attributes\r\n3. Optional array of text nodes, DOM nodes, and child elements\r\n4. Optionally repeat for siblings\r\n\r\nRules (detailed)\r\n============\r\n\r\n1. Last element always the parent (put null if don't want but want to return) unless only attributes and children (no other elements)\r\n2. Individual elements (DOM elements or sequences of string[/object/array]) get added to parent first-in, first-added\r\n3. Arrays indicate children (containing nodes, text (to become text nodes) or arrays encapsulating another Jamilih element structure)\r\n4. Strings indicate elements unless they use special characters, in which case\r\n5. Non-DOM-element objects indicate attribute-value pairs\r\n6. null always indicates a place-holder (only needed in place of parent for last argument if want fragment returned)\r\n7. First item must be an element name (to create an element structure)\r\n8. Always returns first created element, unless null as last argument, in which case, it returns a fragment of all added elements\r\n\r\n\r\nExamples\r\n========\r\n\r\nSimple element...\r\n\r\n```javascript\r\nvar input = jml('input');\r\n```\r\n\r\nSimple element with attributes...\r\n\r\n```javascript\r\nvar input = jml('input', {type:'password', id:'my_pass'});\r\n```\r\n\r\nSimple element with just child elements...\r\n\r\n```javascript\r\nvar div = jml('div', [\r\n    ['p', ['no attributes on the div']]\r\n]);\r\n```\r\n\r\nSimple element with attributes and child elements...\r\n\r\n```javascript\r\nvar div = jml('div', {'class': 'myClass'}, [\r\n    ['p', ['Some inner text']],\r\n    ['p', ['another child paragraph']]\r\n]);\r\n```\r\n\r\nSimple element with attributes, child elements, and text nodes...\r\n\r\n```javascript\r\nvar div = jml('div', {'class': 'myClass'}, [\r\n    'text1',\r\n    ['p', ['Some inner text']],\r\n    'text3'\r\n]);\r\n```\r\n\r\nDOM attachment...\r\n\r\n```javascript\r\nvar simpleAttachToParent = jml('hr', document.body);\r\n```\r\n\r\nReturning first element among siblings when appending them to a DOM element (API unstable)...\r\n\r\n```javascript\r\nvar firstTr = jml('tr', [\r\n        ['td', ['row 1 cell 1']],\r\n        ['td', ['row 1 cell 2']]\r\n    ],\r\n    'tr', {className: 'anotherRowSibling'}, [\r\n        ['td', ['row 2 cell 1']],\r\n        ['td', ['row 2 cell 2']]\r\n    ],\r\n    table\r\n);\r\n```\r\n\r\nReturning element siblings as an array (API unstable)...\r\n\r\n```javascript\r\nvar trsFragment = jml('tr', [\r\n        ['td', ['row 1 cell 1']],\r\n        ['td', ['row 1 cell 2']]\r\n    ],\r\n    'tr', {className: 'anotherRowSibling'}, [\r\n        ['td', ['row 2 cell 1']],\r\n        ['td', ['row 2 cell 2']]\r\n    ],\r\n    null\r\n);\r\n```\r\n\r\nInclusion of regular DOM elements...\r\n\r\n```javascript\r\nvar div = jml(\r\n    'div', [\r\n        $('#DOMChildrenMustBeInArray')[0]\r\n    ],\r\n    $('#anotherElementToAddToParent')[0],\r\n    $('#yetAnotherSiblingToAddToParent')[0],\r\n    parent\r\n);\r\n```\r\n\r\nDocument fragments addable anywhere within child elements...\r\n\r\n```javascript\r\njml('div', [\r\n    'text0',\r\n    {'#': ['text1', ['span', ['inner text']], 'text2']},\r\n    'text3'\r\n])\r\n```\r\n\r\nEvent attachment...\r\n\r\n```javascript\r\nvar input = jml('input', {$on: {\r\n    click: [function () {\r\n        alert('worked1');\r\n    }, true] // Capturing\r\n}});\r\n```\r\n\r\n```javascript\r\nvar input2 = jml('input', {\r\n    style: 'position:absolute; left: -1000px;',\r\n    $on: {\r\n        click: function () {\r\n            alert('worked2');\r\n        },\r\n        focus: [function () {\r\n            alert('worked3');\r\n        }, true]\r\n    }\r\n}, document.body);\r\n```\r\n\r\nComments, processing instructions, entities, decimal and hexadecimal character references, CDATA sections...\r\n\r\n```javascript\r\nvar div = jml('div', [\r\n    ['!', 'a comment'],\r\n    ['?', 'customPI', 'a processing instruction'],\r\n    ['&', 'copy'],\r\n    ['#', '1234'],\r\n    ['#x', 'ab3'],\r\n    ['![', '&test <CDATA> content']\r\n]);\r\n```\r\n\r\nNamespace definitions (default or prefixed)...\r\n\r\n```javascript\r\njml('abc', {xmlns:'def'})\r\n```\r\n\r\n```javascript\r\njml('abc', {xmlns: {'prefix1': 'def', 'prefix2': 'ghi'}})\r\n```\r\n\r\n```javascript\r\njml('abc', {xmlns: {'prefix1': 'def', 'prefix2': 'ghi', '': 'newdefault'}})\r\n```\r\n\r\nNot yet implemented...\r\n\r\n1. Namespaced elements and attributes\r\n2. Ordered sequences of attributes (or namespace declarations) - necessary for perfect round-tripping (e.g., for diffs) given that object iteration order is not reliable across browser\r\n\r\nPossible todos\r\n============\r\n1. Implement a method building JML by string rather than DOM but create DOM (including [XPath](https://github.com/goto100/xpath/blob/master/xpath.js)) interfaces for direct manipulation.\r\n\r\nNaming\r\n======\r\n\r\nI originally named the project JML (for JavaScript or Json Markup Language) and have still kept the abbreviation when used as a global in a browser (and in the filename and examples), but as other projects have used the name or similar ones, I am renaming the project to \"Jamilih\" for the Arabic word meaning \"Beauty\". It is named in honor of the Arabic name of my family's newly-born daughter.\r\n\r\nDesign goals\r\n==========\r\n\r\n1. Be as succinct as possible while being sufficiently functional; avoid null place-holders, etc.\r\n2. Allow reliable iteration order (i.e., use arrays over objects except where order is not needed).\r\n3. Allow for use as a template language, with the opportunity for function calls to easily \r\n\tadd elements, attributes, child content, or fragments without needing to retool the entire structure or\r\n\twrite complex functions to handle the merging.\r\n4. Use a syntax with a minimum of constructs not familiar to XML/HTML users (if any), allowing\r\n\tfor near immediate adoption by any web developer.\r\n5. Work with XML or HTML and optionally support faithful rebuilding of an entire XML document\r\n6. Ability to write libraries which support regular XML needs like XPath expressions (which are more\r\n   appropriate for HTML than those targeted for open-ended JSON, such as JSONPath). Avoid need to \r\n   convert to DOM where possible (and even implement DOM interfaces for it in a modular fashion).\r\n7. Work with JSON, but also allow flexible usage within full JavaScript, such as to allow \r\n\tdropping in DOM nodes or optional DOM mode for attachment of events (but with a preference\r\n\tor option toward internal string concatenation for speed).\r\n8. Be intuitive so that one is not likely to be confused about whether one is looking at \r\n\telement siblings, children, text, etc.\r\n\r\nRelated work\r\n===========\r\n\r\nThe only work which comes close to meeting these goals as far as I have been able to find is JsonML. \r\nJsonML even does a better job of goal #1 in terms of succinctness than my proposal for Jamilih\r\n(except that Jamilih can represent empty elements more succinctly). However,\r\nfor goal #3, I believe Jamilih is slightly more flexible for regular usage in templates, and to\r\nmy personal sensibilities, more clear in goal #8 (and with a plan for goal #5 and #7?).\r\n",
  "_id": "jamilih@0.2.1",
  "_from": "jamilih@"
}
