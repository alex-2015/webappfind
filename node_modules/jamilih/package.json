{
  "name": "jamilih",
  "version": "0.6.0",
  "author": {
    "name": "Brett Zamir",
    "email": "brettz9@yahoo.com",
    "url": "brett-zamir.me"
  },
  "description": "Provide round-trippable JSON/JavaScript serialization as with JsonML, but with all items at a given array level being the same type of item (unless marked with a deeper level of nesting) and with a slightly more template-friendly capacity to inline insert fragments or child nodes (e.g., as by function return).",
  "main": "./jml",
  "repository": {
    "type": "git",
    "url": "https://github.com/brettz9/jamilih.git"
  },
  "keywords": [
    "json",
    "javascript",
    "template",
    "templating",
    "html"
  ],
  "license": "MIT",
  "engine": {
    "node": ">=0.10"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brettz9/jamilih/issues"
  },
  "readme": "NOTE: This project is currently incomplete and the API is not yet stable.\n\n# Rationale\nProvide round-trippable JSON/JavaScript serialization as with JsonML,\nbut with all items at a given array level being the same type of item\n(unless marked with a deeper level of nesting) and with a slightly more\ntemplate-friendly capacity to inline insert fragments or child nodes\n(e.g., as by function return).\n\n# Rules (summary)\n\n1. String element name (or array of 1-4)\n2. Optional object with attributes\n3. Optional array of DOM nodes, strings/numbers/booleans for\ntext nodes, and arrays encapsulating elements (repeat step no. 1)\n4. Optionally repeat for siblings\n\n# Rules (detailed)\n\n1. Currently, the first item supplied to `jml()` must be either:\n\t1. An element name as a string (to create an element\n\tstructure). (Top-level fragments are not currently supported\n\twithout using `null` as the last argument.)\n\t1. Any of the following special characters:\n\t\t1. `!` followed by a string to create a comment\n\t\t1. `&` followed by an HTML entity (e.g., `copy`)\n        1. `#` followed by a decimal character reference as a string or number, e.g., `1234`\n\t\t1. `#x` followed by a hexadecimal character reference as a string, e.g., `ab3`\n\t\t1. `?` followed by a processing instruction target string and string value (XML)\n        1. `'![` followed by CDATA content as a string (XML), e.g., `&test <CDATA> content`\n1. Subsequent strings at the top level create elements siblings (note,\nhowever that this is less flexible for templating).\n1. Non-DOM-element objects (if present, to immediately follow\nelement names) optionally follow and indicate attribute-value pairs\n\t1. \"Magic\" keys in this object alter the default behavior of simply setting an attribute:\n\t\t1. `$on` expects a subject of event types mapped to a function or to an array\n\t\twith the first element as a function and the second element as a boolean\n\t\tindicating whether to capture or not.\n\t\t1. `#` indicates a fragment; see array children below\n\t\t1. The following are set as properties: `class`, `for`, `innerHTML`, `selected`, `checked`, `value`, `defaultValue`, `style` \n\t\t\t1. `className` and `htmlFor` are also provided to avoid the need for quoting the reserved keywords `class` and `for`.\n\t\t1. `on` followed by any string will be set as a property (for events).\n\t\t1. `xmlns` for namespace declarations (not needed in HTML)\n\t\t1. `dataset` is an object whose keys are hyphenated or camel-cased properties used to set the dataset property (note that no polyfill for older browsers is provided out of the box)\n1. Arrays indicate children.\n\t1. They can be:\n\t\t1. DOM Nodes\n\t\t1. Strings, numbers, or booleans (to become text nodes)\n\t\t1. Arrays encapsulating another Jamilih structure (start rule\n\t\tprocessing over at no. 1)\n\t\t1. An object with the key `#` with an array of children (following\n\t\tthese same rules) as its value to represent a fragment. (Useful\n\t\tif embedding the return result of a function amidst other children.)\n\t\t1. Note: Adding a function inline (without being part of an attribute\n\t\tobject) or `null` is currently undefined behavior and should not be used;\n\t\tthese may be allowed for some other purpose in the future, however.\n\t1. Individual elements (DOM elements or sequences of\n\tstring/number/boolean[/object/array]) get added to parent first-in, first-added\n1. The last item supplied to `jml()` is usually the parent node to which to\nappend the contents, with the following exceptions:\n\t1. If there are no other elements (i.e., only an element name with\n\toptional attributes and children), the element is returned.\n\t1. `null` (at the end) will cause an element or fragment to be returned\n1. The first created element will be returned unless `null` is the last\nargument, in which case, it returns a fragment of all added elements or,\nif only one element was present, the element itself.\n\n# Examples\n\nSimple element...\n\n```javascript\nvar input = jml('input');\n```\n\nSimple element with attributes...\n\n```javascript\nvar input = jml('input', {type:'password', id:'my_pass'});\n```\n\nSimple element with just child elements...\n\n```javascript\nvar div = jml('div', [\n    ['p', ['no attributes on the div']]\n]);\n```\n\nSimple element with attributes and child elements...\n\n```javascript\nvar div = jml('div', {'class': 'myClass'}, [\n    ['p', ['Some inner text']],\n    ['p', ['another child paragraph']]\n]);\n```\n\nSimple element with attributes, child elements, and text nodes...\n\n```javascript\nvar div = jml('div', {'class': 'myClass'}, [\n    'text1',\n    ['p', ['Some inner text']],\n    'text3'\n]);\n```\n\nDOM attachment...\n\n```javascript\nvar simpleAttachToParent = jml('hr', document.body);\n```\n\nReturning first element among siblings when appending them to a\nDOM element (API unstable)...\n\n```javascript\nvar firstTr = jml('tr', [\n        ['td', ['row 1 cell 1']],\n        ['td', ['row 1 cell 2']]\n    ],\n    'tr', {className: 'anotherRowSibling'}, [\n        ['td', ['row 2 cell 1']],\n        ['td', ['row 2 cell 2']]\n    ],\n    table\n);\n```\n\nReturning element siblings as an array (API unstable)...\n\n```javascript\nvar trsFragment = jml('tr', [\n        ['td', ['row 1 cell 1']],\n        ['td', ['row 1 cell 2']]\n    ],\n    'tr', {className: 'anotherRowSibling'}, [\n        ['td', ['row 2 cell 1']],\n        ['td', ['row 2 cell 2']]\n    ],\n    null\n);\n```\n\nInclusion of regular DOM elements...\n\n```javascript\nvar div = jml(\n    'div', [\n        $('#DOMChildrenMustBeInArray')[0]\n    ],\n    $('#anotherElementToAddToParent')[0],\n    $('#yetAnotherSiblingToAddToParent')[0],\n    parent\n);\n```\n\nDocument fragments addable anywhere within child elements...\n\n```javascript\njml('div', [\n    'text0',\n    {'#': ['text1', ['span', ['inner text']], 'text2']},\n    'text3'\n])\n```\n\nEvent attachment...\n\n```javascript\nvar input = jml('input', {\n    // Contains events to be added via addEventListener or\n\t//   attachEvent where available\n    $on: {\n        click: [function () {\n            alert('worked1');\n        }\n    }, true] // Capturing\n}});\n```\n\n```javascript\nvar input2 = jml('input', {\n    style: 'position:absolute; left: -1000px;',\n    $on: {\n        click: function () {\n            alert('worked2');\n        },\n        focus: [function () {\n            alert('worked3');\n        }, true]\n    }\n}, document.body);\n```\n\nComments, processing instructions, entities, decimal and hexadecimal\ncharacter references, CDATA sections...\n\n```javascript\nvar div = jml('div', [\n    ['!', 'a comment'],\n    ['?', 'customPI', 'a processing instruction'],\n    ['&', 'copy'],\n    ['#', '1234'],\n    ['#x', 'ab3'],\n    ['![', '&test <CDATA> content']\n]);\n```\n\nNamespace definitions (default or prefixed)...\n\n```javascript\njml('abc', {xmlns:'def'})\n```\n\n```javascript\njml('abc', {xmlns: {'prefix1': 'def', 'prefix2': 'ghi'}})\n```\n\n```javascript\njml('abc', {xmlns: {'prefix1': 'def', 'prefix2': 'ghi', '': 'newdefault'}})\n```\n\nNot yet implemented...\n\n1. Namespaced elements and attributes\n2. Ordered sequences of attributes (or namespace declarations) -\nnecessary for perfect round-tripping (e.g., for diffs) given that\nobject iteration order is not reliable across browser\n\n# Possible todos\n1. Implement a method building JML by string rather than DOM but create\nDOM (including [XPath](https://github.com/goto100/xpath/blob/master/xpath.js))\ninterfaces for direct manipulation.\n1. Allow configuration\n\t1. Allow auto-namespacing of class and/or dataset keys\n\n# Naming\n\nI originally named the project JML (for JavaScript or Json Markup\nLanguage) and have still kept the abbreviation when used as a global\nin a browser (and in the filename and examples), but as other projects\nhave used the name or similar ones, I am renaming the project to\n\"Jamilih\" for the Arabic word meaning \"Beauty\". It is named in honor\nof the Arabic name of my family's newly-born daughter.\n\n# Design goals\n\n1. Be as succinct as possible while being sufficiently functional; avoid\nnull place-holders, etc.\n2. Allow reliable iteration order (i.e., use arrays over objects except\nwhere order is not needed).\n3. Allow for use as a template language, with the opportunity for\nfunction calls to easily add elements, attributes, child content, or\nfragments without needing to retool the entire structure or write\ncomplex functions to handle the merging.\n4. Use a syntax with a minimum of constructs not familiar to XML/HTML\nusers (if any), allowing for near immediate adoption by any web developer.\n5. Work with XML or HTML and optionally support faithful rebuilding of an\nentire XML document\n6. Ability to write libraries which support regular XML needs like XPath\nexpressions (which are more appropriate for HTML than those targeted\nfor open-ended JSON, such as JSONPath). Avoid need to convert to\nDOM where possible (and even implement DOM interfaces for it in a\nmodular fashion).\n7. Work with JSON, but also allow flexible usage within full JavaScript,\nsuch as to allow dropping in DOM nodes or optional DOM mode for\nattachment of events (but with a preference or option toward internal\nstring concatenation for speed).\n8. Be intuitive so that one is not likely to be confused about whether\none is looking at element siblings, children, text, etc.\n\n# Related work\n\nThe only work which comes close to meeting these goals as far as I\nhave been able to find is JsonML. JsonML even does a better job of\ngoal #1 in terms of succinctness than my proposal for Jamilih\n(except that Jamilih can represent empty elements more succinctly). However,\nfor goal #3, I believe Jamilih is slightly more flexible for regular usage\nin templates, and to my personal sensibilities, more clear in goal #8\n(and with a plan for goal #5 and #7?).\n",
  "homepage": "https://github.com/brettz9/jamilih",
  "_id": "jamilih@0.6.0",
  "_shasum": "c5f9931a5c26cae237f4d2371e13524e9d588be0",
  "_from": "jamilih@0.6.0"
}
